package lab06;

import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class Tests {
    ArrayList<BankAccount> accounts;
    ArrayList<Object> objects;
    //we can initialize some objects to be used in later tests
    //using the Before keyword ensures this method is called before 
    //the test methods are called
    @Before
    public void initialize(){
        //NEEDS TO BE FILLED IN AS SPECIFIED
        accounts = new ArrayList<>();
        accounts.add(new BankAccount(500));
        accounts.add(new BankAccount(0));
        accounts.add(new CheckingAccount(7000, 50));
        accounts.add(new CheckingAccount(390000, 0));
        accounts.add(new SavingsAccount(5000, .1));
        accounts.add(new SavingsAccount(1, .5));
        
        objects = new ArrayList<>();
        objects.add(null);
        objects.add(7);
        objects.add("String");
        objects.add('c');
        objects.add(22.00);
        objects.add(1234567L);
        objects.add(new ArrayList<String>());
        objects.add(new int[0]);
        
    }
    
    @After
    public void resetIdNum(){
        BankAccount.reset();
        accounts.clear();
        objects.clear();
    }
    
    //the @Test is necessary, without it the test will not be run
    @Test
    public void testBankAccDeposit() {
        BankAccount bacc = new BankAccount(700.00);
        bacc.deposit(100);
        try {
            //when comparing two doubles, we need to give it some small value for it to see 
            //if the expected and actual value are close enough to equaling one another
            assertEquals(800.00, bacc.getBalance(), 1e-6);
        }
        //here if there is an assertion error, we can catch it 
        //and print the error message out, then throw the AssertionError
        //so that the test still fails. 
        catch(AssertionError e){
            System.out.println("BankAccount's deposit() method failed: " + e.getMessage());
            throw e;
        }
    }
    @Test
    public void testCheckingAccWithdraw(){
        CheckingAccount checking = new CheckingAccount(1000.00, 10);
        for(int i = 0; i < 3; i++) checking.withdraw(100);
        try {
            //when comparing two doubles, we need to give it some small value for it to see 
            //if the expected and actual value are close enough to equaling one another
            assertEquals(700.00, checking.getBalance(), 1e-6);
        }
        //here if there is an assertion error, we can catch it 
        //and print the error message out, then throw the AssertionError
        //so that the test still fails. 
        catch(AssertionError e){
            System.out.println("CheckingAccount's withdraw() method failed: " + e.getMessage());
            throw e;
        }
    }
    @Test
    public void testCheckingAccGetWithdrawCount(){
        CheckingAccount checking = new CheckingAccount(1000.00, 10);
        for(int i = 0; i < 3; i++) checking.withdraw(100);
        try {
            //when comparing two integers, we don't need a third argument 
            //since ints can be checked for equality
            assertEquals(3, checking.getWithdrawCount());
        }
        //here if there is an assertion error, we can catch it 
        //and print the error message out, then throw the AssertionError
        //so that the test still fails. 
        catch(AssertionError e){
            System.out.println("CheckingAccount's getWithdrawCount() method failed: " + e.getMessage());
            System.out.println("Make sure you adjust the withdrawCount in your CheckingAccount's withdraw() method!");
            throw e;
        }
    }
    //TODO: Add some of your own additional tests. Keep each test in a separate test function.
    //This isolates testing a single method or case to a single testing method. Otherwise, 
    //if you try to do too much testing in one tester method, you could throw an error
    //for a test and never find the errors of the other tests you put in that method. 
    
    @Test
    public void testBankAccWithdraw() {
        BankAccount bacc = new BankAccount(700.00);
    }
    
    @Test
    public void testBankAccGetIdNum() {
        BankAccount bacc = new BankAccount(700.00);
        BankAccount bacc2 = new BankAccount(30);
        try {
            assertEquals(0, bacc.getIdNum());
        } catch(AssertionError e) {
            System.out.println("BankAccount's getIdNum() method failed: " + e.getMessage());
            throw e;
        }
        try {
            assertEquals(1, bacc2.getIdNum());
        } catch(AssertionError e) {
            System.out.println("BankAccount's getIdNum() method failed: " + e.getMessage());
            throw e;
        }
    }
    
    @Test
    public void testBankAccGetBalance() {
        BankAccount bacc = new BankAccount(700.00);
        try {
            assertEquals(700.00, bacc.getBalance(), 0.00);
        } catch(AssertionError e) {
            System.out.println("BankAccount's getBalance() method failed: " + e.getMessage());
            throw e;
        }
    }
    
    @Test
    public void testSavingsAccountDeposit() {
    	SavingsAccount savings = new SavingsAccount(4000.0, 0.15);
    }
    
    @Test
    public void testSavingsAccountGetRate() {
        SavingsAccount savings = new SavingsAccount(4000.0, 0.15);
        try {
            assertEquals(0.15, savings.getRate(), 0.00);
        } catch(AssertionError e) {
            System.out.println("SavingsAccount's getRate() method failed: " + e.getMessage());
            throw e;
        }
        
    }
    
    @Test
    public void testCheckingAccountGetWithdrawLimit() {
        CheckingAccount checking = new CheckingAccount(1000.00, 10);
        try {
            assertEquals(10, checking.getWithdrawLimit());
        } catch(AssertionError e) {
            System.out.println("CheckingAccount's getWithdrawLimit() method failed: " + e.getMessage());
            throw e;
        }
    }
    
    @Test
    public void dynamicDispatchPrinting(){
        //FILL IN AS SPECIFIED
        for(BankAccount i: accounts) {
            System.out.println(i);
        }
        for(Object j: objects) {
            System.out.println(j);
        }
    }

    @Test
    public void testAccountsDeposit() {
        double amount = 85.36;
        double addition = 0;
        for(BankAccount i: accounts) {
            double initBalance = i.getBalance();
            i.deposit(amount);
            if (i instanceof SavingsAccount) {
            	addition = amount * i.getRate()
            }
            try {
                assertEquals(i.getBalance(), initBalance + amount, 1e-6);
            } catch (AssertionError e) {
                System.out.println(i.toString() + " and had its deposit() method failed: " + e.getMessage());
                throw e;
            }
        }
    }
    
    @Test
    public void testAccountsWithdraw() {
        double withdrawal = 50;
        for(BankAccount i : accounts) {
            for(int j=0; j  <  20; j++) {
                i.withdraw(withdrawal);
            }
            System.out.println(i);
        }
    }
}