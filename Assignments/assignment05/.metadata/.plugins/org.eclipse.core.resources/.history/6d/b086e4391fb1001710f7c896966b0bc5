package assignment05;

import static org.junit.Assert.*;
import java.time.LocalDate;
import java.util.ArrayList;
import org.junit.Test;
import org.junit.Before;

public class TravelTester {
	private ArrayList<TravelExpenses> objectsWithExpenses = new ArrayList<>();
	
	@Before
	public void addObjectsWithExpenses() {
		objectsWithExpenses.add(new TravelByRentalCar(350.00, "Enterprise", LocalDate.of(2017, 10, 10), LocalDate.of(2017, 10, 14)));
		objectsWithExpenses.add(new TravelByRentalCar(87.5555, "Budget", LocalDate.of(2016,  2,  21), LocalDate.of(2017, 2, 21)));
		objectsWithExpenses.add(new Lodging(LocalDate.of(2017, 10, 10), LocalDate.of(2017, 11, 4), "Holiday Inn", 600.00));
		objectsWithExpenses.add(new Lodging(LocalDate.of(2017, 10, 10), LocalDate.of(2017, 12, 2), "Some resort", 6324.113));
		objectsWithExpenses.add(new TravelByAir(LocalDate.of(2017, 10, 10), LocalDate.of(2018, 1, 5), "Southwest", 1276.87));
		objectsWithExpenses.add(new TravelByAir(LocalDate.of(2017,  4,  3), LocalDate.of(2017, 6,  29), "Delta", 321.098));
		objectsWithExpenses.add(new Meal(MealType.BREAKFAST, 13.00, LocalDate.of(2017, 10, 20)));
		objectsWithExpenses.add();
	}
	@Test
	public void testDefaultGetDescription() {
		final class Test implements TravelExpenses {
			public double amountToReimburse() {return 0;}
		}
		Test test = new Test();
		try {
			test.getDescription();
			System.out.println("TravelExpenses default getDescription() method didn't throw an UnsuppportedOperationException when a class didn't implement the method.");
		} catch(UnsupportedOperationException e) {}
	}
	
	@Test
	public void testTravelByRentalCarAmountToReimburse() {
		TravelByRentalCar rentalCar = new TravelByRentalCar(350, "Enterprise", LocalDate.of(2017, 10, 10), LocalDate.of(2017, 10, 14));
		try {
			assertEquals(350.00, rentalCar.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("TravelByRentalCar's amountToReimburse() method failed: " + e.getMessage());
			throw e;
		}
	}
	
	@Test
	public void testTravelByRentalCarAddFuel() {
		TravelByRentalCar rentalCar = new TravelByRentalCar(350, "Enterprise", LocalDate.of(2017, 10, 10), LocalDate.of(2017, 10, 14));
		rentalCar.addFuel(8.79, 21.21);
		try {
			assertEquals(371.21, rentalCar.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("TravelByRentalCar's addFuel() method failed: " + e.getMessage());
			throw e;
		}
	}
	
	@Test
	public void testLodgingAmountToReimburse() {
		Lodging lodging = new Lodging(LocalDate.of(2017, 10, 10), LocalDate.of(2017, 11, 4), "Holiday Inn", 600);
		try {
			assertEquals(600.00, lodging.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("Lodging's amountToReimburse() method failed: " + e.getMessage());
			throw e;
		}
	}
	
	@Test
	public void testTravelByAirAmountToReimburse() {
		TravelByAir air = new TravelByAir(LocalDate.of(2017, 10, 10), LocalDate.of(2018, 1, 5), "Southwest", 1276.87);
		try {
			assertEquals(1276.87, air.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("TravelByAir's amountToReimburse() method failed: " + e.getMessage());
			throw e;
		}
	}
	
	@Test
	public void testMealAmountToReimburseMealPrice() {
		Meal meal = new Meal(MealType.BREAKFAST, 13.00, LocalDate.of(2017, 10, 20));
		try {
			assertEquals(13, meal.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("Meal's amountToReimburse() method failed: " + e.getMessage());
			throw e;
		}
	}
	
	@Test
	public void testMealAmountToReimburseMaxPrice() {
		Meal meal = new Meal(MealType.BREAKFAST, 7.00, LocalDate.of(2017, 10, 20));
		try {
			assertEquals(8, meal.amountToReimburse(), 1e-6);
		} catch(AssertionError e) {
			System.out.println("Meal's amountToReimburse() method failed: " + e.getMessage());
			throw e;
		}
	}

}
